"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.planResourcesResponseFromProtobuf = exports.listSchemasResponseFromProtobuf = exports.listPoliciesResponseFromProtobuf = exports.getSchemasResponseFromProtobuf = exports._policyFromProtobuf = exports.getPoliciesResponseFromProtobuf = exports.enablePoliciesResponseFromProtobuf = exports.disablePoliciesResponseFromProtobuf = exports.deleteSchemasResponseFromProtobuf = exports.checkResourcesResponseFromProtobuf = void 0;
const effect_1 = require("../protobuf/cerbos/effect/v1/effect");
const engine_1 = require("../protobuf/cerbos/engine/v1/engine");
const schema_1 = require("../protobuf/cerbos/schema/v1/schema");
const external_1 = require("../types/external");
function checkResourcesResponseFromProtobuf({ requestId, results, }) {
    return new external_1.CheckResourcesResponse({
        requestId,
        results: results.map(checkResourcesResultFromProtobuf),
    });
}
exports.checkResourcesResponseFromProtobuf = checkResourcesResponseFromProtobuf;
function checkResourcesResultFromProtobuf({ resource, actions, validationErrors, meta, outputs, }) {
    if (!resource) {
        throw new Error("Missing resource on CheckResources result");
    }
    return new external_1.CheckResourcesResult({
        resource,
        actions: actionsFromProtobuf(actions),
        validationErrors: validationErrors.map(validationErrorFromProtobuf),
        metadata: meta,
        outputs: outputs.map(outputResultFromProtobuf),
    });
}
function actionsFromProtobuf(actions) {
    return Object.fromEntries(Object.entries(actions).map(([action, effect]) => [
        action,
        effectFromProtobuf(effect),
    ]));
}
function effectFromProtobuf(effect) {
    return effect === effect_1.Effect.EFFECT_ALLOW ? external_1.Effect.ALLOW : external_1.Effect.DENY;
}
function validationErrorFromProtobuf({ path, message, source, }) {
    return {
        path,
        message,
        source: validationErrorSourceFromProtobuf(source),
    };
}
function validationErrorSourceFromProtobuf(source) {
    switch (source) {
        case schema_1.ValidationError_Source.SOURCE_PRINCIPAL:
            return external_1.ValidationErrorSource.PRINCIPAL;
        case schema_1.ValidationError_Source.SOURCE_RESOURCE:
            return external_1.ValidationErrorSource.RESOURCE;
        default:
            throw new Error(`Unexpected validation error source ${source} (${schema_1.ValidationError_Source[source] ?? "unrecognized"})`);
    }
}
function outputResultFromProtobuf({ src, val }) {
    return {
        source: src,
        value: val,
    };
}
function deleteSchemasResponseFromProtobuf({ deletedSchemas, }) {
    return {
        deletedSchemas,
    };
}
exports.deleteSchemasResponseFromProtobuf = deleteSchemasResponseFromProtobuf;
function disablePoliciesResponseFromProtobuf({ disabledPolicies, }) {
    return {
        disabledPolicies,
    };
}
exports.disablePoliciesResponseFromProtobuf = disablePoliciesResponseFromProtobuf;
function enablePoliciesResponseFromProtobuf({ enabledPolicies, }) {
    return {
        enabledPolicies,
    };
}
exports.enablePoliciesResponseFromProtobuf = enablePoliciesResponseFromProtobuf;
function getPoliciesResponseFromProtobuf({ policies, }) {
    return {
        policies: policies.map(_policyFromProtobuf),
    };
}
exports.getPoliciesResponseFromProtobuf = getPoliciesResponseFromProtobuf;
/** @internal */
function _policyFromProtobuf({ apiVersion, description, disabled, metadata, variables, policyType, }) {
    return {
        apiVersion,
        description,
        disabled,
        metadata: metadata && policyMetadataFromProtobuf(metadata),
        variables,
        ...policyTypeFromProtobuf(policyType),
    };
}
exports._policyFromProtobuf = _policyFromProtobuf;
function policyMetadataFromProtobuf({ annotations, hash, sourceFile, storeIdentifer, storeIdentifier, }) {
    return {
        annotations,
        hash,
        sourceFile,
        storeIdentifer: storeIdentifier || storeIdentifer,
        storeIdentifier: storeIdentifier || storeIdentifer,
    };
}
function policyTypeFromProtobuf(policyType) {
    if (!policyType) {
        throw new Error("Unknown policy type: undefined");
    }
    switch (policyType.$case) {
        case "derivedRoles":
            return derivedRolesFromProtobuf(policyType.derivedRoles);
        case "exportVariables":
            return exportVariablesFromProtobuf(policyType.exportVariables);
        case "principalPolicy":
            return principalPolicyFromProtobuf(policyType.principalPolicy);
        case "resourcePolicy":
            return resourcePolicyFromProtobuf(policyType.resourcePolicy);
        default:
            throw new Error(`Unknown policy type: ${JSON.stringify(policyType, null, 2)}`);
    }
}
function derivedRolesFromProtobuf({ name, definitions, variables, }) {
    return {
        derivedRoles: {
            name,
            definitions: definitions.map(derivedRoleDefinitionFromProtobuf),
            variables: variables && variablesFromProtobuf(variables),
        },
    };
}
function derivedRoleDefinitionFromProtobuf({ name, parentRoles, condition, }) {
    return {
        name,
        parentRoles,
        condition: condition && conditionFromProtobuf(condition),
    };
}
function conditionFromProtobuf({ condition }) {
    switch (condition?.$case) {
        case "match":
            return {
                match: matchFromProtobuf(condition.match),
            };
        default:
            throw new Error(`Unknown condition type: ${JSON.stringify(condition, null, 2)}`);
    }
}
function matchFromProtobuf({ op }) {
    switch (op?.$case) {
        case "all":
            return {
                all: matchesFromProtobuf(op.all),
            };
        case "any":
            return {
                any: matchesFromProtobuf(op.any),
            };
        case "none":
            return {
                none: matchesFromProtobuf(op.none),
            };
        case "expr":
            return {
                expr: op.expr,
            };
        default:
            throw new Error(`Unknown match type: ${JSON.stringify(op, null, 2)}`);
    }
}
function matchesFromProtobuf({ of }) {
    return {
        of: of.map(matchFromProtobuf),
    };
}
function variablesFromProtobuf({ import: imports, local, }) {
    return {
        import: imports,
        local,
    };
}
function exportVariablesFromProtobuf({ name, definitions, }) {
    return {
        exportVariables: {
            name,
            definitions,
        },
    };
}
function principalPolicyFromProtobuf({ principal, version, rules, scope, variables, }) {
    return {
        principalPolicy: {
            principal,
            version,
            rules: rules.map(principalRuleFromProtobuf),
            scope,
            variables: variables && variablesFromProtobuf(variables),
        },
    };
}
function principalRuleFromProtobuf({ resource, actions, }) {
    return {
        resource,
        actions: actions.map(principalRuleActionFromProtobuf),
    };
}
function principalRuleActionFromProtobuf({ action, effect, condition, name, output, }) {
    return {
        action,
        effect: effectFromProtobuf(effect),
        condition: condition && conditionFromProtobuf(condition),
        name,
        output: output && outputFromProtobuf(output),
    };
}
function outputFromProtobuf({ expr }) {
    return { expr };
}
function resourcePolicyFromProtobuf({ resource, version, importDerivedRoles, rules, schemas, scope, variables, }) {
    return {
        resourcePolicy: {
            resource,
            version,
            importDerivedRoles,
            rules: rules.map(resourceRuleFromProtobuf),
            schemas: schemas && schemaRefsFromProtobuf(schemas),
            scope,
            variables: variables && variablesFromProtobuf(variables),
        },
    };
}
function resourceRuleFromProtobuf({ actions, effect, derivedRoles, roles, condition, name, output, }) {
    return {
        actions,
        effect: effectFromProtobuf(effect),
        derivedRoles,
        roles,
        condition: condition && conditionFromProtobuf(condition),
        name,
        output: output && outputFromProtobuf(output),
    };
}
function schemaRefsFromProtobuf({ principalSchema, resourceSchema, }) {
    return {
        principalSchema: principalSchema && schemaRefFromProtobuf(principalSchema),
        resourceSchema: resourceSchema && schemaRefFromProtobuf(resourceSchema),
    };
}
function schemaRefFromProtobuf({ ref, ignoreWhen }) {
    return {
        ref,
        ignoreWhen: ignoreWhen && {
            actions: ignoreWhen.actions,
        },
    };
}
function getSchemasResponseFromProtobuf({ schemas, }) {
    return {
        schemas: schemas.map(schemaFromProtobuf),
    };
}
exports.getSchemasResponseFromProtobuf = getSchemasResponseFromProtobuf;
function schemaFromProtobuf({ id, definition }) {
    return {
        id,
        definition: new external_1.SchemaDefinition(definition),
    };
}
function listPoliciesResponseFromProtobuf({ policyIds, }) {
    return {
        ids: policyIds,
    };
}
exports.listPoliciesResponseFromProtobuf = listPoliciesResponseFromProtobuf;
function listSchemasResponseFromProtobuf({ schemaIds, }) {
    return {
        ids: schemaIds,
    };
}
exports.listSchemasResponseFromProtobuf = listSchemasResponseFromProtobuf;
function planResourcesResponseFromProtobuf({ requestId, filter, validationErrors, meta, }) {
    if (!filter) {
        throw new Error("Missing filter on PlanResources response");
    }
    const kind = planKindFromProtobuf(filter.kind);
    const metadata = meta && planResourcesMetadataFromProtobuf(meta);
    if (kind === external_1.PlanKind.CONDITIONAL) {
        if (!filter.condition) {
            throw new Error("Missing filter condition on PlanResources response");
        }
        return {
            requestId,
            kind,
            condition: planOperandFromProtobuf(filter.condition),
            validationErrors: validationErrors.map(validationErrorFromProtobuf),
            metadata,
        };
    }
    return {
        requestId,
        kind,
        validationErrors: validationErrors.map(validationErrorFromProtobuf),
        metadata,
    };
}
exports.planResourcesResponseFromProtobuf = planResourcesResponseFromProtobuf;
function planKindFromProtobuf(kind) {
    switch (kind) {
        case engine_1.PlanResourcesFilter_Kind.KIND_ALWAYS_ALLOWED:
            return external_1.PlanKind.ALWAYS_ALLOWED;
        case engine_1.PlanResourcesFilter_Kind.KIND_ALWAYS_DENIED:
            return external_1.PlanKind.ALWAYS_DENIED;
        case engine_1.PlanResourcesFilter_Kind.KIND_CONDITIONAL:
            return external_1.PlanKind.CONDITIONAL;
        default:
            throw new Error(`Unexpected PlanResources filter kind ${kind} (${engine_1.PlanResourcesFilter_Kind[kind] ?? "unrecognized"})`);
    }
}
function planOperandFromProtobuf({ node, }) {
    if (!node) {
        throw new Error("Missing node on PlanResources expression operand");
    }
    switch (node.$case) {
        case "expression":
            return new external_1.PlanExpression(node.expression.operator, node.expression.operands.map(planOperandFromProtobuf));
        case "value":
            return new external_1.PlanExpressionValue((node.value ?? null));
        case "variable":
            return new external_1.PlanExpressionVariable(node.variable);
    }
}
function planResourcesMetadataFromProtobuf({ filterDebug, matchedScope, }) {
    return {
        conditionString: filterDebug,
        matchedScope,
    };
}
//# sourceMappingURL=fromProtobuf.js.map