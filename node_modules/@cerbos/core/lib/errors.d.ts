import type { ValidationError } from "./types/external";
/**
 * Status codes returned by the Cerbos policy decision point server.
 *
 * @public
 */
export declare enum Status {
    /**
     * The operation was cancelled.
     */
    CANCELLED = 1,
    /**
     * The operation timed out.
     */
    DEADLINE_EXCEEDED = 4,
    /**
     * The operation failed due to an internal error.
     */
    INTERNAL = 13,
    /**
     * The operation was rejected because an argument was invalid.
     */
    INVALID_ARGUMENT = 3,
    /**
     * The operation failed because a resource has been exhausted.
     */
    RESOURCE_EXHAUSTED = 8,
    /**
     * The operation was rejected because it did not have valid authentication credentials.
     */
    UNAUTHENTICATED = 16,
    /**
     * The operation was rejected because it did not have valid authentication credentials.
     */
    UNAVAILABLE = 14,
    /**
     * The operation is not supported.
     */
    UNIMPLEMENTED = 12,
    /**
     * An unknown error occurred.
     */
    UNKNOWN = 2
}
/**
 * Error thrown when the Cerbos policy decision point server returns an unsuccessful response.
 *
 * @public
 */
export declare class NotOK extends Error {
    /**
     * The status code returned by the Cerbos policy decision point server.
     */
    readonly code: Status;
    /**
     * Additional error details.
     */
    readonly details: string;
    /**
     * Parse a JSON-serialized unsuccessful response.
     */
    static fromJSON(text: string): NotOK;
    constructor(
    /**
     * The status code returned by the Cerbos policy decision point server.
     */
    code: Status, 
    /**
     * Additional error details.
     */
    details: string);
}
/**
 * Error thrown when input fails schema validation, if the {@link @cerbos/core#Client} is configured with {@link @cerbos/core#Options.onValidationError | onValidationError} set to `"throw"`.
 *
 * @public
 */
export declare class ValidationFailed extends Error {
    /**
     * The validation errors that occurred.
     */
    readonly validationErrors: ValidationError[];
    constructor(
    /**
     * The validation errors that occurred.
     */
    validationErrors: ValidationError[]);
}
//# sourceMappingURL=errors.d.ts.map