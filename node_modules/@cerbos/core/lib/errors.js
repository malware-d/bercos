"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationFailed = exports.NotOK = exports.Status = void 0;
/**
 * Status codes returned by the Cerbos policy decision point server.
 *
 * @public
 */
var Status;
(function (Status) {
    /**
     * The operation was cancelled.
     */
    Status[Status["CANCELLED"] = 1] = "CANCELLED";
    /**
     * The operation timed out.
     */
    Status[Status["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
    /**
     * The operation failed due to an internal error.
     */
    Status[Status["INTERNAL"] = 13] = "INTERNAL";
    /**
     * The operation was rejected because an argument was invalid.
     */
    Status[Status["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
    /**
     * The operation failed because a resource has been exhausted.
     */
    Status[Status["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
    /**
     * The operation was rejected because it did not have valid authentication credentials.
     */
    Status[Status["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    /**
     * The operation was rejected because it did not have valid authentication credentials.
     */
    Status[Status["UNAVAILABLE"] = 14] = "UNAVAILABLE";
    /**
     * The operation is not supported.
     */
    Status[Status["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
    /**
     * An unknown error occurred.
     */
    Status[Status["UNKNOWN"] = 2] = "UNKNOWN";
})(Status || (exports.Status = Status = {}));
/**
 * Error thrown when the Cerbos policy decision point server returns an unsuccessful response.
 *
 * @public
 */
class NotOK extends Error {
    code;
    details;
    /**
     * Parse a JSON-serialized unsuccessful response.
     */
    static fromJSON(text) {
        try {
            const error = JSON.parse(text);
            return new NotOK(code(error), details(error));
        }
        catch (_) {
            return new NotOK(Status.UNKNOWN, text);
        }
    }
    constructor(
    /**
     * The status code returned by the Cerbos policy decision point server.
     */
    code, 
    /**
     * Additional error details.
     */
    details) {
        super(`gRPC error ${code} (${Status[code]}): ${details}`);
        this.code = code;
        this.details = details;
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.NotOK = NotOK;
function code(error) {
    if (has(error, "code") &&
        typeof error.code === "number" &&
        error.code in Status) {
        return error.code || Status.UNKNOWN;
    }
    throw new Error("Error does not include expected code");
}
function details(error) {
    if (has(error, "message") && typeof error.message === "string") {
        return error.message;
    }
    throw new Error("Error does not include expected details");
}
function has(object, property) {
    return !!object && Object.prototype.hasOwnProperty.call(object, property);
}
/**
 * Error thrown when input fails schema validation, if the {@link @cerbos/core#Client} is configured with {@link @cerbos/core#Options.onValidationError | onValidationError} set to `"throw"`.
 *
 * @public
 */
class ValidationFailed extends Error {
    validationErrors;
    constructor(
    /**
     * The validation errors that occurred.
     */
    validationErrors) {
        super("Input failed schema validation");
        this.validationErrors = validationErrors;
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.ValidationFailed = ValidationFailed;
//# sourceMappingURL=errors.js.map