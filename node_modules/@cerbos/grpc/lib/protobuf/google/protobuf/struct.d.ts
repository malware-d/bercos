import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "google.protobuf";
export declare enum NullValue {
    NULL_VALUE = 0
}
export interface Struct {
    fields: {
        [key: string]: any | undefined;
    };
}
export interface Struct_FieldsEntry {
    key: string;
    value: any | undefined;
}
export interface Value {
    kind?: {
        $case: "nullValue";
        nullValue: NullValue;
    } | {
        $case: "numberValue";
        numberValue: number;
    } | {
        $case: "stringValue";
        stringValue: string;
    } | {
        $case: "boolValue";
        boolValue: boolean;
    } | {
        $case: "structValue";
        structValue: {
            [key: string]: any;
        } | undefined;
    } | {
        $case: "listValue";
        listValue: Array<any> | undefined;
    } | undefined;
}
export interface ListValue {
    values: any[];
}
export declare const Struct: {
    encode(message: Struct, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Struct;
    wrap(object: {
        [key: string]: any;
    } | undefined): Struct;
    unwrap(message: Struct): {
        [key: string]: any;
    };
};
export declare const Struct_FieldsEntry: {
    encode(message: Struct_FieldsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Struct_FieldsEntry;
};
export declare const Value: {
    encode(message: Value, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Value;
    wrap(value: any): Value;
    unwrap(message: Value): string | number | boolean | Object | null | Array<any> | undefined;
};
export declare const ListValue: {
    encode(message: ListValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListValue;
    wrap(array: Array<any> | undefined): ListValue;
    unwrap(message: ListValue): Array<any>;
};
//# sourceMappingURL=struct.d.ts.map