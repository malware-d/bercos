"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReloadStoreResponse = exports.DeleteSchemaResponse = exports.GetSchemaResponse = exports.ListSchemasResponse = exports.AddOrUpdateSchemaResponse = exports.EnablePolicyResponse = exports.DisablePolicyResponse = exports.GetPolicyResponse = exports.ListPoliciesResponse = exports.ServerInfoResponse = exports.ListAuditLogEntriesResponse = exports.AddOrUpdatePolicyResponse = exports.CheckResourcesResponse_ResultEntry_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = exports.CheckResourcesResponse_ResultEntry_Meta = exports.CheckResourcesResponse_ResultEntry_Resource = exports.CheckResourcesResponse_ResultEntry = exports.CheckResourcesResponse = exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceBatchResponse_ActionEffectMap = exports.CheckResourceBatchResponse = exports.CheckResourceSetResponse_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = exports.CheckResourceSetResponse_Meta_ActionMeta = exports.CheckResourceSetResponse_Meta_EffectMeta = exports.CheckResourceSetResponse_Meta = exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceSetResponse_ActionEffectMap = exports.CheckResourceSetResponse = exports.PlanResourcesResponse_Meta = exports.PlanResourcesResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const empty_1 = require("../../../google/protobuf/empty");
const audit_1 = require("../../audit/v1/audit");
const engine_1 = require("../../engine/v1/engine");
const policy_1 = require("../../policy/v1/policy");
const schema_1 = require("../../schema/v1/schema");
exports.protobufPackage = "cerbos.response.v1";
function createBasePlanResourcesResponse() {
    return {
        requestId: "",
        action: "",
        resourceKind: "",
        policyVersion: "",
        filter: undefined,
        meta: undefined,
        validationErrors: [],
    };
}
exports.PlanResourcesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.resourceKind !== "") {
            writer.uint32(26).string(message.resourceKind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(34).string(message.policyVersion);
        }
        if (message.filter !== undefined) {
            engine_1.PlanResourcesFilter.encode(message.filter, writer.uint32(42).fork()).ldelim();
        }
        if (message.meta !== undefined) {
            exports.PlanResourcesResponse_Meta.encode(message.meta, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.action = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.resourceKind = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.filter = engine_1.PlanResourcesFilter.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.meta = exports.PlanResourcesResponse_Meta.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesResponse_Meta() {
    return { filterDebug: "", matchedScope: "" };
}
exports.PlanResourcesResponse_Meta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filterDebug !== "") {
            writer.uint32(10).string(message.filterDebug);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesResponse_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filterDebug = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse() {
    return { requestId: "", resourceInstances: {}, meta: undefined };
}
exports.CheckResourceSetResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        Object.entries(message.resourceInstances).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_ResourceInstancesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.meta !== undefined) {
            exports.CheckResourceSetResponse_Meta.encode(message.meta, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourceSetResponse_ResourceInstancesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.resourceInstances[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.meta = exports.CheckResourceSetResponse_Meta.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ActionEffectMap() {
    return { actions: {}, validationErrors: [] };
}
exports.CheckResourceSetResponse_ActionEffectMap = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ActionEffectMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ActionEffectMap_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ActionEffectMap_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta() {
    return { resourceInstances: {} };
}
exports.CheckResourceSetResponse_Meta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.resourceInstances).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.resourceInstances[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_EffectMeta() {
    return { matchedPolicy: "", matchedScope: "" };
}
exports.CheckResourceSetResponse_Meta_EffectMeta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.matchedPolicy !== "") {
            writer.uint32(10).string(message.matchedPolicy);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_EffectMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.matchedPolicy = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ActionMeta() {
    return { actions: {}, effectiveDerivedRoles: [] };
}
exports.CheckResourceSetResponse_Meta_ActionMeta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ActionMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.effectiveDerivedRoles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ActionMeta_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_Meta_EffectMeta.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ActionMeta_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_Meta_EffectMeta.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ResourceInstancesEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_Meta_ActionMeta.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ResourceInstancesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_Meta_ActionMeta.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ResourceInstancesEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_ResourceInstancesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_ActionEffectMap.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ResourceInstancesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_ActionEffectMap.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse() {
    return { requestId: "", results: [] };
}
exports.CheckResourceBatchResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        for (const v of message.results) {
            exports.CheckResourceBatchResponse_ActionEffectMap.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.results.push(exports.CheckResourceBatchResponse_ActionEffectMap.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse_ActionEffectMap() {
    return { resourceId: "", actions: {}, validationErrors: [] };
}
exports.CheckResourceBatchResponse_ActionEffectMap = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.resourceId !== "") {
            writer.uint32(10).string(message.resourceId);
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse_ActionEffectMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resourceId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.actions[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse_ActionEffectMap_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse_ActionEffectMap_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse() {
    return { requestId: "", results: [] };
}
exports.CheckResourcesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        for (const v of message.results) {
            exports.CheckResourcesResponse_ResultEntry.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.results.push(exports.CheckResourcesResponse_ResultEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry() {
    return {
        resource: undefined,
        actions: {},
        validationErrors: [],
        meta: undefined,
        outputs: [],
    };
}
exports.CheckResourcesResponse_ResultEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.resource !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Resource.encode(message.resource, writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourcesResponse_ResultEntry_ActionsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.meta !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Meta.encode(message.meta, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.outputs) {
            engine_1.OutputEntry.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resource = exports.CheckResourcesResponse_ResultEntry_Resource.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourcesResponse_ResultEntry_ActionsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.actions[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.meta = exports.CheckResourcesResponse_ResultEntry_Meta.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.outputs.push(engine_1.OutputEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Resource() {
    return { id: "", kind: "", policyVersion: "", scope: "" };
}
exports.CheckResourcesResponse_ResultEntry_Resource = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.kind !== "") {
            writer.uint32(18).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(26).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Resource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta() {
    return { actions: {}, effectiveDerivedRoles: [] };
}
exports.CheckResourcesResponse_ResultEntry_Meta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.effectiveDerivedRoles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta_EffectMeta() {
    return { matchedPolicy: "", matchedScope: "" };
}
exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.matchedPolicy !== "") {
            writer.uint32(10).string(message.matchedPolicy);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta_EffectMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.matchedPolicy = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value =
                        exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourcesResponse_ResultEntry_ActionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseAddOrUpdatePolicyResponse() {
    return { success: undefined };
}
exports.AddOrUpdatePolicyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.success !== undefined) {
            empty_1.Empty.encode(message.success, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOrUpdatePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.success = empty_1.Empty.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseListAuditLogEntriesResponse() {
    return { entry: undefined };
}
exports.ListAuditLogEntriesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        switch (message.entry?.$case) {
            case "accessLogEntry":
                audit_1.AccessLogEntry.encode(message.entry.accessLogEntry, writer.uint32(10).fork()).ldelim();
                break;
            case "decisionLogEntry":
                audit_1.DecisionLogEntry.encode(message.entry.decisionLogEntry, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAuditLogEntriesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entry = {
                        $case: "accessLogEntry",
                        accessLogEntry: audit_1.AccessLogEntry.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.entry = {
                        $case: "decisionLogEntry",
                        decisionLogEntry: audit_1.DecisionLogEntry.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseServerInfoResponse() {
    return { version: "", commit: "", buildDate: "" };
}
exports.ServerInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.commit !== "") {
            writer.uint32(18).string(message.commit);
        }
        if (message.buildDate !== "") {
            writer.uint32(26).string(message.buildDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.commit = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.buildDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseListPoliciesResponse() {
    return { policyIds: [] };
}
exports.ListPoliciesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.policyIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListPoliciesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policyIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseGetPolicyResponse() {
    return { policies: [] };
}
exports.GetPolicyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.policies) {
            policy_1.Policy.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policies.push(policy_1.Policy.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseDisablePolicyResponse() {
    return { disabledPolicies: 0 };
}
exports.DisablePolicyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.disabledPolicies !== 0) {
            writer.uint32(8).uint32(message.disabledPolicies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisablePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.disabledPolicies = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseEnablePolicyResponse() {
    return { enabledPolicies: 0 };
}
exports.EnablePolicyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.enabledPolicies !== 0) {
            writer.uint32(8).uint32(message.enabledPolicies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnablePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enabledPolicies = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseAddOrUpdateSchemaResponse() {
    return {};
}
exports.AddOrUpdateSchemaResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOrUpdateSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseListSchemasResponse() {
    return { schemaIds: [] };
}
exports.ListSchemasResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.schemaIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSchemasResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schemaIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseGetSchemaResponse() {
    return { schemas: [] };
}
exports.GetSchemaResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.schemas) {
            schema_1.Schema.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schemas.push(schema_1.Schema.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseDeleteSchemaResponse() {
    return { deletedSchemas: 0 };
}
exports.DeleteSchemaResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.deletedSchemas !== 0) {
            writer.uint32(8).uint32(message.deletedSchemas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.deletedSchemas = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
function createBaseReloadStoreResponse() {
    return {};
}
exports.ReloadStoreResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadStoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
};
//# sourceMappingURL=response.js.map