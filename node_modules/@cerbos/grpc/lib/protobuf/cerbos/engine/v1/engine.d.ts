import _m0 from "protobufjs/minimal";
import { Effect } from "../../effect/v1/effect";
import { ValidationError } from "../../schema/v1/schema";
export declare const protobufPackage = "cerbos.engine.v1";
export interface PlanResourcesInput {
    requestId: string;
    action: string;
    principal: Principal | undefined;
    resource: PlanResourcesInput_Resource | undefined;
    auxData: AuxData | undefined;
    includeMeta: boolean;
}
export interface PlanResourcesInput_Resource {
    kind: string;
    attr: {
        [key: string]: any | undefined;
    };
    policyVersion: string;
    scope: string;
}
export interface PlanResourcesInput_Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface PlanResourcesFilter {
    kind: PlanResourcesFilter_Kind;
    condition: PlanResourcesFilter_Expression_Operand | undefined;
}
export declare enum PlanResourcesFilter_Kind {
    KIND_UNSPECIFIED = 0,
    KIND_ALWAYS_ALLOWED = 1,
    KIND_ALWAYS_DENIED = 2,
    KIND_CONDITIONAL = 3
}
export interface PlanResourcesFilter_Expression {
    operator: string;
    operands: PlanResourcesFilter_Expression_Operand[];
}
export interface PlanResourcesFilter_Expression_Operand {
    node?: {
        $case: "value";
        value: any | undefined;
    } | {
        $case: "expression";
        expression: PlanResourcesFilter_Expression;
    } | {
        $case: "variable";
        variable: string;
    } | undefined;
}
export interface PlanResourcesOutput {
    requestId: string;
    action: string;
    kind: string;
    policyVersion: string;
    scope: string;
    filter: PlanResourcesFilter | undefined;
    filterDebug: string;
    validationErrors: ValidationError[];
}
export interface CheckInput {
    requestId: string;
    resource: Resource | undefined;
    principal: Principal | undefined;
    actions: string[];
    auxData: AuxData | undefined;
}
export interface CheckOutput {
    requestId: string;
    resourceId: string;
    actions: {
        [key: string]: CheckOutput_ActionEffect;
    };
    effectiveDerivedRoles: string[];
    validationErrors: ValidationError[];
    outputs: OutputEntry[];
}
export interface CheckOutput_ActionEffect {
    effect: Effect;
    policy: string;
    scope: string;
}
export interface CheckOutput_ActionsEntry {
    key: string;
    value: CheckOutput_ActionEffect | undefined;
}
export interface OutputEntry {
    src: string;
    val: any | undefined;
}
export interface Resource {
    kind: string;
    policyVersion: string;
    id: string;
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface Principal {
    id: string;
    policyVersion: string;
    roles: string[];
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Principal_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface AuxData {
    jwt: {
        [key: string]: any | undefined;
    };
}
export interface AuxData_JwtEntry {
    key: string;
    value: any | undefined;
}
export declare const PlanResourcesInput: {
    encode(message: PlanResourcesInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput;
};
export declare const PlanResourcesInput_Resource: {
    encode(message: PlanResourcesInput_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput_Resource;
};
export declare const PlanResourcesInput_Resource_AttrEntry: {
    encode(message: PlanResourcesInput_Resource_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput_Resource_AttrEntry;
};
export declare const PlanResourcesFilter: {
    encode(message: PlanResourcesFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter;
};
export declare const PlanResourcesFilter_Expression: {
    encode(message: PlanResourcesFilter_Expression, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter_Expression;
};
export declare const PlanResourcesFilter_Expression_Operand: {
    encode(message: PlanResourcesFilter_Expression_Operand, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter_Expression_Operand;
};
export declare const PlanResourcesOutput: {
    encode(message: PlanResourcesOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesOutput;
};
export declare const CheckInput: {
    encode(message: CheckInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckInput;
};
export declare const CheckOutput: {
    encode(message: CheckOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput;
};
export declare const CheckOutput_ActionEffect: {
    encode(message: CheckOutput_ActionEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput_ActionEffect;
};
export declare const CheckOutput_ActionsEntry: {
    encode(message: CheckOutput_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput_ActionsEntry;
};
export declare const OutputEntry: {
    encode(message: OutputEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OutputEntry;
};
export declare const Resource: {
    encode(message: Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource;
};
export declare const Resource_AttrEntry: {
    encode(message: Resource_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource_AttrEntry;
};
export declare const Principal: {
    encode(message: Principal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Principal;
};
export declare const Principal_AttrEntry: {
    encode(message: Principal_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Principal_AttrEntry;
};
export declare const AuxData: {
    encode(message: AuxData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData;
};
export declare const AuxData_JwtEntry: {
    encode(message: AuxData_JwtEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData_JwtEntry;
};
//# sourceMappingURL=engine.d.ts.map