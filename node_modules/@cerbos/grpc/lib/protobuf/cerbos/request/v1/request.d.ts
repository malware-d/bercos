import _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
import { PlanResourcesInput_Resource, Principal, Resource } from "../../engine/v1/engine";
import { Policy } from "../../policy/v1/policy";
import { Schema } from "../../schema/v1/schema";
export declare const protobufPackage = "cerbos.request.v1";
export interface PlanResourcesRequest {
    requestId: string;
    action: string;
    principal: Principal | undefined;
    resource: PlanResourcesInput_Resource | undefined;
    auxData: AuxData | undefined;
    includeMeta: boolean;
}
export interface CheckResourceSetRequest {
    requestId: string;
    actions: string[];
    principal: Principal | undefined;
    resource: ResourceSet | undefined;
    includeMeta: boolean;
    auxData: AuxData | undefined;
}
export interface ResourceSet {
    kind: string;
    policyVersion: string;
    instances: {
        [key: string]: AttributesMap;
    };
    scope: string;
}
export interface ResourceSet_InstancesEntry {
    key: string;
    value: AttributesMap | undefined;
}
export interface AttributesMap {
    attr: {
        [key: string]: any | undefined;
    };
}
export interface AttributesMap_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface CheckResourceBatchRequest {
    requestId: string;
    principal: Principal | undefined;
    resources: CheckResourceBatchRequest_BatchEntry[];
    auxData: AuxData | undefined;
}
export interface CheckResourceBatchRequest_BatchEntry {
    actions: string[];
    resource: Resource | undefined;
}
export interface CheckResourcesRequest {
    requestId: string;
    includeMeta: boolean;
    principal: Principal | undefined;
    resources: CheckResourcesRequest_ResourceEntry[];
    auxData: AuxData | undefined;
}
export interface CheckResourcesRequest_ResourceEntry {
    actions: string[];
    resource: Resource | undefined;
}
export interface AuxData {
    jwt: AuxData_JWT | undefined;
}
export interface AuxData_JWT {
    token: string;
    keySetId: string;
}
export interface AddOrUpdatePolicyRequest {
    policies: Policy[];
}
export interface ListAuditLogEntriesRequest {
    kind: ListAuditLogEntriesRequest_Kind;
    filter?: {
        $case: "tail";
        tail: number;
    } | {
        $case: "between";
        between: ListAuditLogEntriesRequest_TimeRange;
    } | {
        $case: "since";
        since: Duration;
    } | {
        $case: "lookup";
        lookup: string;
    } | undefined;
}
export declare enum ListAuditLogEntriesRequest_Kind {
    KIND_UNSPECIFIED = 0,
    KIND_ACCESS = 1,
    KIND_DECISION = 2
}
export interface ListAuditLogEntriesRequest_TimeRange {
    start: Date | undefined;
    end: Date | undefined;
}
export interface ServerInfoRequest {
}
export interface ListPoliciesRequest {
    includeDisabled: boolean;
    nameRegexp: string;
    scopeRegexp: string;
    versionRegexp: string;
}
export interface GetPolicyRequest {
    id: string[];
}
export interface DisablePolicyRequest {
    id: string[];
}
export interface EnablePolicyRequest {
    id: string[];
}
export interface AddOrUpdateSchemaRequest {
    schemas: Schema[];
}
export interface ListSchemasRequest {
}
export interface GetSchemaRequest {
    id: string[];
}
export interface DeleteSchemaRequest {
    id: string[];
}
export interface ReloadStoreRequest {
    wait: boolean;
}
export declare const PlanResourcesRequest: {
    encode(message: PlanResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesRequest;
};
export declare const CheckResourceSetRequest: {
    encode(message: CheckResourceSetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetRequest;
};
export declare const ResourceSet: {
    encode(message: ResourceSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceSet;
};
export declare const ResourceSet_InstancesEntry: {
    encode(message: ResourceSet_InstancesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceSet_InstancesEntry;
};
export declare const AttributesMap: {
    encode(message: AttributesMap, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttributesMap;
};
export declare const AttributesMap_AttrEntry: {
    encode(message: AttributesMap_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttributesMap_AttrEntry;
};
export declare const CheckResourceBatchRequest: {
    encode(message: CheckResourceBatchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceBatchRequest;
};
export declare const CheckResourceBatchRequest_BatchEntry: {
    encode(message: CheckResourceBatchRequest_BatchEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceBatchRequest_BatchEntry;
};
export declare const CheckResourcesRequest: {
    encode(message: CheckResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesRequest;
};
export declare const CheckResourcesRequest_ResourceEntry: {
    encode(message: CheckResourcesRequest_ResourceEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesRequest_ResourceEntry;
};
export declare const AuxData: {
    encode(message: AuxData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData;
};
export declare const AuxData_JWT: {
    encode(message: AuxData_JWT, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData_JWT;
};
export declare const AddOrUpdatePolicyRequest: {
    encode(message: AddOrUpdatePolicyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrUpdatePolicyRequest;
};
export declare const ListAuditLogEntriesRequest: {
    encode(message: ListAuditLogEntriesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListAuditLogEntriesRequest;
};
export declare const ListAuditLogEntriesRequest_TimeRange: {
    encode(message: ListAuditLogEntriesRequest_TimeRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListAuditLogEntriesRequest_TimeRange;
};
export declare const ServerInfoRequest: {
    encode(_: ServerInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerInfoRequest;
};
export declare const ListPoliciesRequest: {
    encode(message: ListPoliciesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListPoliciesRequest;
};
export declare const GetPolicyRequest: {
    encode(message: GetPolicyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPolicyRequest;
};
export declare const DisablePolicyRequest: {
    encode(message: DisablePolicyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DisablePolicyRequest;
};
export declare const EnablePolicyRequest: {
    encode(message: EnablePolicyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EnablePolicyRequest;
};
export declare const AddOrUpdateSchemaRequest: {
    encode(message: AddOrUpdateSchemaRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrUpdateSchemaRequest;
};
export declare const ListSchemasRequest: {
    encode(_: ListSchemasRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSchemasRequest;
};
export declare const GetSchemaRequest: {
    encode(message: GetSchemaRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSchemaRequest;
};
export declare const DeleteSchemaRequest: {
    encode(message: DeleteSchemaRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSchemaRequest;
};
export declare const ReloadStoreRequest: {
    encode(message: ReloadStoreRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadStoreRequest;
};
//# sourceMappingURL=request.d.ts.map